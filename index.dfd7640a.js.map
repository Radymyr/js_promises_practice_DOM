{"mappings":"ACGA,IAAM,EAAa,CAAC,cAAe,QAAQ,CAErC,EAA0B,SAAC,CAAjC,EACE,IAAM,EAAM,SAAS,aAAa,CAAC,OAEnC,EAAI,SAAS,CAAC,GAAG,CAAC,WAClB,EAAI,YAAY,CAAC,UAAW,gBAC5B,EAAI,WAAW,CAAG,EAClB,SAAS,IAAI,CAAC,MAAM,CAAC,EACvB,EAEM,EAAwB,SAAC,CAA/B,EACE,IAAM,EAAM,SAAS,aAAa,CAAC,OAEnC,EAAI,SAAS,CAAC,GAAG,CAAC,SAClB,EAAI,YAAY,CAAC,UAAW,gBAC5B,EAAI,WAAW,CAAG,EAClB,SAAS,IAAI,CAAC,MAAM,CAAC,EACvB,EAUA,AARqB,IAAI,QAAQ,SAAC,CAAA,CAAS,CAA3C,EACE,SAAS,gBAAgB,CAAC,CAAU,CAAC,EAAE,CAAE,WACvC,EAAQ,6BACV,GAEA,WAAW,EAAQ,IAAM,8BAC3B,GAGG,IAAI,CAAC,SAAC,CADT,EACyB,OAAA,EAAwB,EAC9C,GAAA,KAAK,CAAC,SAAC,CAAP,EAAqB,OAAA,EAAsB,E,GAU9C,AARsB,IAAI,QAAQ,SAAC,CAAnC,EACE,EAAW,OAAO,CAAC,SAAC,CAApB,EACE,SAAS,gBAAgB,CAAC,EAAW,WACnC,EAAQ,8BACV,EACF,EACF,GAEc,IAAI,CAAC,SAAC,CAApB,EAAoC,OAAA,EAAwB,E,GAe1D,QAAQ,GAAG,CAAC,CAZK,IAAI,QAAQ,SAAC,CAA9B,EACE,SAAS,gBAAgB,CAAC,CAAU,CAAC,EAAE,CAAE,WACvC,EAAQ,6BACV,EACF,GAEiB,IAAI,QAAQ,SAAC,CAA9B,EACE,SAAS,gBAAgB,CAAC,CAAU,CAAC,EAAE,CAAE,WACvC,EAAQ,6BACV,EACF,GAEgC,EAAE,IAAI,CAAC,SAAC,CAAR,EAC9B,OAAA,EAAwB,E","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["/* eslint-disable function-paren-newline */ \"use strict\";\nvar eventsType = [\n    \"contextmenu\",\n    \"click\"\n];\nvar showSuccessNotification = function(successText) {\n    var div = document.createElement(\"div\");\n    div.classList.add(\"success\");\n    div.setAttribute(\"data-qa\", \"notification\");\n    div.textContent = successText;\n    document.body.append(div);\n};\nvar showErrorNotification = function(errorText) {\n    var div = document.createElement(\"div\");\n    div.classList.add(\"error\");\n    div.setAttribute(\"data-qa\", \"notification\");\n    div.textContent = errorText;\n    document.body.append(div);\n};\nvar firstPromise = new Promise(function(resolve, reject) {\n    document.addEventListener(eventsType[1], function() {\n        resolve(\"First promise was resolved\");\n    });\n    setTimeout(reject, 3000, \"First promise was rejected \");\n});\nfirstPromise.then(function(successText) {\n    return showSuccessNotification(successText);\n}).catch(function(errorText) {\n    return showErrorNotification(errorText);\n});\nvar secondPromise = new Promise(function(resolve) {\n    eventsType.forEach(function(eventType) {\n        document.addEventListener(eventType, function() {\n            resolve(\"Second promise was resolved\");\n        });\n    });\n});\nsecondPromise.then(function(successText) {\n    return showSuccessNotification(successText);\n});\nvar thirdPromise = function() {\n    var promise1 = new Promise(function(resolve) {\n        document.addEventListener(eventsType[0], function() {\n            resolve(\"Third promise was resolved\");\n        });\n    });\n    var promise2 = new Promise(function(resolve) {\n        document.addEventListener(eventsType[1], function() {\n            resolve(\"Third promise was resolved\");\n        });\n    });\n    Promise.all([\n        promise1,\n        promise2\n    ]).then(function(successText) {\n        return showSuccessNotification(successText);\n    });\n};\nthirdPromise();\n\n//# sourceMappingURL=index.dfd7640a.js.map\n","/* eslint-disable function-paren-newline */\n'use strict';\n\nconst eventsType = ['contextmenu', 'click'];\n\nconst showSuccessNotification = (successText) => {\n  const div = document.createElement('div');\n\n  div.classList.add('success');\n  div.setAttribute('data-qa', 'notification');\n  div.textContent = successText;\n  document.body.append(div);\n};\n\nconst showErrorNotification = (errorText) => {\n  const div = document.createElement('div');\n\n  div.classList.add('error');\n  div.setAttribute('data-qa', 'notification');\n  div.textContent = errorText;\n  document.body.append(div);\n};\n\nconst firstPromise = new Promise((resolve, reject) => {\n  document.addEventListener(eventsType[1], () => {\n    resolve('First promise was resolved');\n  });\n\n  setTimeout(reject, 3000, 'First promise was rejected ');\n});\n\nfirstPromise\n  .then((successText) => showSuccessNotification(successText))\n  .catch((errorText) => showErrorNotification(errorText));\n\nconst secondPromise = new Promise((resolve) => {\n  eventsType.forEach((eventType) => {\n    document.addEventListener(eventType, () => {\n      resolve('Second promise was resolved');\n    });\n  });\n});\n\nsecondPromise.then((successText) => showSuccessNotification(successText));\n\nconst thirdPromise = () => {\n  const promise1 = new Promise((resolve) => {\n    document.addEventListener(eventsType[0], () => {\n      resolve('Third promise was resolved');\n    });\n  });\n\n  const promise2 = new Promise((resolve) => {\n    document.addEventListener(eventsType[1], () => {\n      resolve('Third promise was resolved');\n    });\n  });\n\n  Promise.all([promise1, promise2]).then((successText) =>\n    showSuccessNotification(successText),\n  );\n};\n\nthirdPromise();\n"],"names":["eventsType","showSuccessNotification","successText","div","document","createElement","classList","add","setAttribute","textContent","body","append","showErrorNotification","errorText","firstPromise","Promise","resolve","reject","addEventListener","setTimeout","then","catch","secondPromise","forEach","eventType","all"],"version":3,"file":"index.dfd7640a.js.map"}